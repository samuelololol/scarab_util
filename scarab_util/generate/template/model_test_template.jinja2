#!/usr/bin/env python
# -*- coding: utf-8 -*-
import unittest
import pytest
import transaction
from pyramid import testing
import time

from scarab import models
from scarab.models import DBSession
from utils import id_generator


@pytest.fixture(scope='module')
def {{model_instance_name}}(request, engine_fixture):
    {{name}}_table = models.{{name}}.{{model_classname}}
    with transaction.manager as tm:
        {{name}} = {{name}}_table(
                            {{name}}_name=id_generator(size=7).decode('utf-8'),
                            description=u'a brief description')
        DBSession.add({{name}})
        DBSession.flush()
    print "({{model_instance_name}} fixture)=> created"
    def fin():
        model = DBSession.query({{name}}_table).filter(
                {{name}}_table.{{name}}_id == {{name}}.{{name}}_id).scalar()
        if model:
            DBSession.delete(model)
            DBSession.flush()
            transaction.commit()
            print '({{model_instance_name}} fixture)=> delete'
        if DBSession.dirty:
            transaction.commit()
    request.addfinalizer(fin)
    return {{name}}


def test_query_{{name}}(engine_fixture, {{model_instance_name}}):
    {{name}}_table = models.{{name}}.{{model_classname}}
    {{name}} = DBSession.query({{name}}_table).filter(
            {{name}}_table.{{name}}_name == {{model_instance_name}}.{{name}}_name).scalar()
    assert {{name}}.{{name}}_name == {{model_instance_name}}.{{name}}_name

def test_modify_{{name}}(engine_fixture, {{model_instance_name}}):
    {{name}}_table = models.{{name}}.{{model_classname}}
    model = DBSession.query({{name}}_table).filter(
            {{name}}_table.{{name}}_name == {{model_instance_name}}.{{name}}_name).scalar()
    assert model.{{name}}_id == {{model_instance_name}}.{{name}}_id

    original_{{name}}_id = model.{{name}}_id
    new_{{name}}_name = id_generator(size=5).decode('utf-8')

    with transaction.manager as tm:
        {{model_instance_name}}.{{name}}_name = new_{{name}}_name
        DBSession.flush()
        find_{{name}} = DBSession.query({{name}}_table).filter(
                {{name}}_table.{{name}}_name == new_{{name}}_name).scalar()
        assert find_{{name}}.{{name}}_id == original_{{name}}_id

def test_delete_{{name}}(engine_fixture):
    {{name}}_table = models.{{name}}.{{model_classname}}
    new_{{name}}_name = id_generator(size=25).decode('utf-8')
    with transaction.manager as tm:

        #create
        new_model = {{name}}_table({{name}}_name=new_{{name}}_name)
        DBSession.add(new_model)
        DBSession.flush()

        model = DBSession.query({{name}}_table).filter(
                {{name}}_table.{{name}}_name == new_{{name}}_name).scalar()
        assert model

        #delete
        DBSession.delete(model)
        DBSession.flush()

        model = DBSession.query({{name}}_table).filter(
                {{name}}_table.{{name}}_name == new_{{name}}_name).first()
        assert model == None

def test_{{name}}_to_json(engine_fixture, {{model_instance_name}}, MockedRequest):
    {{name}}_table = models.{{name}}.{{model_classname}}
    original_{{name}}_id = {{model_instance_name}}.{{name}}_id
    original_{{name}}_name = {{model_instance_name}}.{{name}}_name

    {{name}} = DBSession.query({{name}}_table).filter(
                     {{name}}_table.{{name}}_id == original_{{name}}_id).scalar()
    
    {{name}}_json = {{name}}.to_json(MockedRequest)

    assert True == isinstance({{name}}_json, dict)
    assert {{name}}_json['{{name}}_id'] == original_{{name}}_id
    assert {{name}}_json['{{name}}_name'] == original_{{name}}_name

def test_{{name}}_list_to_array(engine_fixture, {{model_instance_name}}, MockedRequest):
    {{name}}_table = models.{{name}}.{{model_classname}}
    {{name}}_list = {{name}}_table.all_to_json_array(MockedRequest)

    assert True == isinstance({{name}}_list, list)
    assert {{model_instance_name}}.{{name}}_id in [u['{{name}}_id'] for u in {{name}}_list]
    assert {{model_instance_name}}.{{name}}_name in [u['{{name}}_name'] for u in {{name}}_list]

