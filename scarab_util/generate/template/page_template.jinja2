#!/usr/bin/env python
# -*- coding: utf-8 -*-
import logging
logger = logging.getLogger(__name__)

from pyramid.view import view_config
from scarab.services import {{service_name}}

import formencode

#class Schema_{{name}}_get(Schema):
#    parameter1 = formencode.validators.String(strip=False, not_empty=True)
#    parameter2 = formencode.validators.PhoneNumber(strip=True, not_empty=True) 
#    parameter3 = formencode.validators.Email(resolve_domain=True, not_empty=True)
#
#class Schema_{{name}}_post(Schema):
#    parameter1 = formencode.validators.String(strip=False, not_empty=True)
#    parameter2 = formencode.validators.PhoneNumber(strip=True, not_empty=True) 
#    parameter3 = formencode.validators.Email(resolve_domain=True, not_empty=True)
#
#class Schema_{{name}}_put(Schema):
#    parameter1 = formencode.validators.String(strip=False, not_empty=True)
#    parameter2 = formencode.validators.PhoneNumber(strip=True, not_empty=True) 
#    parameter3 = formencode.validators.Email(resolve_domain=True, not_empty=True)
#
#class Schema_{{name}}_delete(Schema):
#    parameter1 = formencode.validators.String(strip=False, not_empty=True)
#    parameter2 = formencode.validators.PhoneNumber(strip=True, not_empty=True) 
#    parameter3 = formencode.validators.Email(resolve_domain=True, not_empty=True)


class {{page_classname}}(object):
    def __init__(self, context, request):
        self.context = context
        self.request = request

    @view_config(route_name='{{route_name}}',
                 request_method='GET',
                 renderer='scarab:templates/{{template_filename}}',
                 #permission='view')
                )
    def {{name}}_get(self):
        #-----------
        #verify from body
        #-----------
        # params = Schema_{{name}}_get.to_python(self.request.json_body)
        #-----------
        #read logic
        #-----------
        # success, data = {{service_name}}.func()

        return {'page_name': '{{name}}',
                'page_filename': '{{page_filename}}',
                'template_filename': '{{template_filename}}'}

    @view_config(route_name='{{route_name}}',
                 request_method='POST',
                 #permission='view',
                 #renderer='scarab:templates/<some jinja2 file>',
                )
    def {{name}}_post(self):
        #-----------
        #verify form data
        #-----------
        # {{name}}_form = {'parameter1': self.request.POST['parameter1'],
        #      'parameter2': self.request.POST['parameter2']}
        # params = Schema_{{name}}_post.to_python({{name}}_form)
        #-----------
        #create logic
        #-----------
        # success, data = {{service_name}}.func()
        #
        return {'key': 'POST'}

    @view_config(route_name='{{route_name}}',
                 request_method='PUT',
                 #permission='view',
                 #renderer='scarab:templates/<some jinja2 file>',
                )
    def {{name}}_put(self):
        #-----------
        #update logic
        #-----------
        # data = {{service_name}}.func()
        #
        return {'key': 'PUT'}

    @view_config(route_name='{{route_name}}',
                 request_method='DELETE',
                 #permission='view',
                 #renderer='scarab:templates/<some jinja2 file>',
                )
    def {{name}}_delete(self):
        #-----------
        #delete logic
        #-----------
        # success, data = {{service_name}}.func()
        #
        return {'key': 'DELETE'}

