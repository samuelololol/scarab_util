#!/usr/bin/env python
# -*- coding: utf-8 -*-
import logging
logger = logging.getLogger(__name__)

from scarab.models import DBSession
from scarab.models import Base
from scarab.common import ModelMethod

from sqlalchemy import Column
from sqlalchemy import ForeignKey
from sqlalchemy.orm import relationship
from sqlalchemy.orm import backref

from sqlalchemy.types import (
        BigInteger,
        Integer,
        String,
        Boolean,
        DateTime,
        Unicode,
        UnicodeText,
        Float,
        )

import datetime


class {{model_classname}}(Base):
    __tablename__ = '{{name}}'

    {{name}}_id     = Column(Integer,      nullable=False, unique=True, primary_key=True, autoincrement=True)
    {{name}}_name   = Column(Unicode(255), nullable=False, unique=True, index=True)
    description     = Column(Unicode(255), nullable=True,  unique=False)
    createddatetime = Column(DateTime,     nullable=False)
    updateddatetime = Column(DateTime,     nullable=False)
    #-------
    #example
    #-------
    #parameter1      = Column(Boolean,      nullable=False, unique=False)
    #parameter2      = Column(String(255),  nullable=False, unique=False)
    #parameter3      = Column(String(255),  nullable=False, unique=False)


    #ForeignKey
    #<table_name>_id = Column(Integer, ForeignKey('<table>.<column>'), nullable=False, unique=False)
    #-------
    #example
    #-------
    #group_id        = Column(Integer, ForeignKey('group.group_id'),   nullable=False, unique=False)


    #relationship
    #<relation_name> = relationship('<model_classname',
    #                               lazy='subquery',
    #                               cascade='all,delete,delete-orphan',
    #                               backref=backref('<table>',
    #                                               lazy='subquery',
    #                                               order_by=<column on this table>
    #                                               ), 
    #                              )
    #-------
    #example
    #-------
    #company         = relationship('Company_TB',
    #                               lazy='subquery',
    #                               cascade='all,delete,delete-orphan',
    #                               backref=backref('company',
    #                                               lazy='subquery',
    #                                               order_by=user_id), 
    #                               )

    def __init__(self, *args, **kwargs):
        self.createddatetime = datetime.datetime.utcnow()
        self.updateddatetime = datetime.datetime.utcnow()
        super({{model_classname}}, self).__init__(*args, **kwargs)

    @classmethod
    def all_to_json_array(cls, request, ignore=[]):
        if request.scarab_settings['backend_db'] == 'sqlite':
            json_array = cls._manual_all_to_json_array(ignore=ignore)
        elif request.scarab_settings['backend_db'] == 'postgres':
            json_array = cls._pg_all_to_json_array(ignore=ignore)
        json_array = [] if json_array == None else json_array
        return json_array

    @classmethod
    def _manual_all_to_json_array(cls, ignore=[]):
        logger.debug('sqlite does not implement array_to_json()')
        {{name}}s_list = []
        {{name}}s = DBSession.query(cls).all()
        if {{name}}s != None:
            for {{name}} in {{name}}s:
                {{name}}s_list.append({{name}}._manual_to_json(ignore=ignore))
        return {{name}}s_list

    @classmethod
    def _pg_all_to_json_array(cls, ignore=[]):
        logger.debug('execute array_to_json()')
        sql_expression = \
            """
            select array_to_json(array_agg(t)) from (
                select * from %s) t; """ % (cls.__tablename__)
        {{name}}s = DBSession.execute(sql_expression).scalar()
        logger.debug('json {{name}}s: %s' % {{name}}s)
        if {{name}}s != None:
            for {{name}} in {{name}}s:
                for ig in ignore:
                    {{name}}.pop(ig)
        return {{name}}s

    def to_json(self, request, ignore=[]):
        json_obj = {}
        if request.scarab_settings['backend_db'] == 'sqlite':
            json_obj = self._manual_to_json(ignore=ignore)
        elif request.scarab_settings['backend_db'] == 'postgres':
            json_obj = self._pg_row_to_json(ignore=ignore)

        logger.debug('this is json_obj: %s' % json_obj)
        json_obj = {} if json_obj == None else json_obj
        return json_obj

    def _manual_to_json(self, ignore=[]):
        logger.debug('sqlite does not implement row_to_json()')
        time_format = '%Y-%m-%dT%H:%M:%S%z.%f'
        {{name}} = {}
        {{name}}['{{name}}_id'] = self.{{name}}_id
        {{name}}['{{name}}_name'] = self.{{name}}_name
        {{name}}['description'] = self.description
        {{name}}['createddatetime'] = self.createddatetime.strftime(time_format)
        {{name}}['updateddatetime'] = self.updateddatetime.strftime(time_format)
        for ig in ignore:
            {{name}}.pop(ig)
        return {{name}}

    def _pg_row_to_json(self, ignore=[]):
        logger.debug('execute row_to_json()')
        sql_expression = \
            """
            select row_to_json(u) from (
                select *
                from %s where {{name}}_id = %s) u;
            """ % (self.__tablename__, self.{{name}}_id)
        {{name}} = DBSession.execute(sql_expression).scalar()
        logger.debug('json {{name}}: %s' % {{name}})
        for ig in ignore:
            {{name}}.pop(ig)
        return {{name}}

