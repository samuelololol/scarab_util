#!/usr/bin/env python
# -*- coding: utf-8 -*-
import logging
logger = logging.getLogger(__name__)

from scarab.models import DBSession
from scarab.models import Base
from scarab.common import ModelMethod

from sqlalchemy import Column
from sqlalchemy import ForeignKey
from sqlalchemy.orm import relationship
from sqlalchemy.orm import backref

from sqlalchemy.types import (
        BigInteger,
        Integer,
        String,
        Boolean,
        DateTime,
        Unicode,
        UnicodeText,
        Float,
        )

import datetime


class {{model_classname}}(Base):
    __tablename__ = '{{model_name}}'

    {{model_name}}_id     = Column(Integer,      nullable=False, unique=True, primary_key=True, autoincrement=True)
    {{model_name}}_name   = Column(Unicode(255), nullable=False, unique=True, index=True)
    description     = Column(Unicode(255), nullable=True,  unique=False)
    createddatetime = Column(DateTime,     nullable=False)
    updateddatetime = Column(DateTime,     nullable=False)
    #-------
    #example
    #-------
    #parameter1      = Column(Boolean,      nullable=False, unique=False)
    #parameter2      = Column(String(255),  nullable=False, unique=False)
    #parameter3      = Column(String(255),  nullable=False, unique=False)


    #ForeignKey
    #<table_name>_id = Column(Integer, ForeignKey('<table>.<column>'), nullable=False, unique=False)
    #-------
    #example
    #-------
    #group_id        = Column(Integer, ForeignKey('group.group_id'),   nullable=False, unique=False)


    #relationship
    #<relation_name> = relationship('<model_classname',
    #                               lazy='subquery',
    #                               cascade='all,delete,delete-orphan',
    #                               backref=backref('<table>',
    #                                               lazy='subquery',
    #                                               order_by=<column on this table>
    #                                               ), 
    #                              )
    #-------
    #example
    #-------
    #company         = relationship('Company_TB',
    #                               lazy='subquery',
    #                               cascade='all,delete,delete-orphan',
    #                               backref=backref('company',
    #                                               lazy='subquery',
    #                                               order_by=user_id), 
    #                               )

    def __init__(self, *args, **kwargs):
        self.createddatetime = datetime.datetime.utcnow()
        self.updateddatetime = datetime.datetime.utcnow()
        super({{model_classname}}, self).__init__(*args, **kwargs)

